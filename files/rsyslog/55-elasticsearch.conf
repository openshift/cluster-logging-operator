ruleset(name="error_es") {
    action(type="omfile" template="viaq_template_nl" file=`echo $RSYSLOG_BULK_ERRORS`)
}

ruleset(name="try_es") {
    if strlen($.omes!status) > 0 then {
        # retry case
        if ($.omes!status == 200) or ($.omes!status == 201) or (($.omes!status == 409) and ($.omes!writeoperation == "create")) then {
            stop # successful
        }
        if ($.omes!writeoperation == "unknown") or (strlen($.omes!error!type) == 0) or (strlen($.omes!error!reason) == 0) then {
            call error_es
            stop
        }
        if ($.omes!status == 400) or ($.omes!status < 200) then {
            call error_es
            stop
        }
        # else fall through to retry operation
    }
    if strlen($!viaq_msg_id) > 0 then {
        set $.viaq_msg_id = $!viaq_msg_id;
    } else if strlen($.omes!_id) > 0 then {
        # retry
        set $.viaq_msg_id = $.omes!_id;
    } else {
        # NOTE: depends on rsyslog being compiled with --enable-uuid
        set $.viaq_msg_id = $uuid;
    }
    if strlen($.omes!_index) > 0 then {
        # retry
        set $.viaq_index_name = $.omes!_index;
    } else {
        set $.viaq_index_name = exec_template("prefix_index_template");
    }
    if ($.viaq_index_prefix startswith "project.") or
       ((`echo $ES_HOST` == `echo $OPS_HOST`) and (`echo $ES_PORT` == `echo $OPS_PORT`)) then {
        action(
            name=`echo $ES_OUTPUT_NAME`
            type="omelasticsearch"
            server=`echo $ES_HOST`
            serverport=`echo $ES_PORT`
            template="viaq_template"
            searchIndex="index_template"
            dynSearchIndex="on"
            searchType="com.redhat.viaq.common"
            bulkmode="on"
            writeoperation="create"
            bulkid="id_template"
            dynbulkid="on"
            retryfailures="on"
            retryruleset="try_es"
            usehttps="on"
            tls.cacert=`echo $ES_CA`
            tls.mycert=`echo $ES_CLIENT_CERT`
            tls.myprivkey=`echo $ES_CLIENT_KEY`
            rebindinterval=`echo $ES_REBIND_INTERVAL`
            queue.filename="es-app"
            queue.spoolDirectory=`echo $RSYSLOG_SPOOLDIRECTORY`
            queue.type=`echo $ES_QUEUE_TYPE`
            queue.maxDiskSpace=`echo $ES_QUEUE_MAXDISKSPACE`
            queue.maxFileSize=`echo $ES_QUEUE_MAXFILESIZE`
            queue.checkpointInterval=`echo $ES_QUEUE_CHECKPOINTINTERVAL`
            queue.syncqueuefiles="on"
            action.resumeRetryCount="-1"
            )
            # not yet supported - action.resumeIntervalMax=`echo $ES_RETRY_WAIT`
    } else {
        action(
            name=`echo $ES_OPS_OUTPUT_NAME`
            type="omelasticsearch"
            server=`echo $OPS_HOST`
            serverport=`echo $OPS_PORT`
            template="viaq_template"
            searchIndex="index_template"
            dynSearchIndex="on"
            searchType="com.redhat.viaq.common"
            bulkmode="on"
            writeoperation="create"
            bulkid="id_template"
            dynbulkid="on"
            retryfailures="on"
            retryruleset="try_es"
            usehttps="on"
            tls.cacert=`echo $OPS_CA`
            tls.mycert=`echo $OPS_CLIENT_CERT`
            tls.myprivkey=`echo $OPS_CLIENT_KEY`
            rebindinterval=`echo $OPS_REBIND_INTERVAL`
            queue.filename="es-infra"
            queue.spoolDirectory=`echo $RSYSLOG_SPOOLDIRECTORY`
            queue.type=`echo $OPS_QUEUE_TYPE`
            queue.maxDiskSpace=`echo $OPS_QUEUE_MAXDISKSPACE`
            queue.maxFileSize=`echo $OPS_QUEUE_MAXFILESIZE`
            queue.checkpointInterval=`echo $OPS_QUEUE_CHECKPOINTINTERVAL`
            queue.syncqueuefiles="on"
            action.resumeRetryCount="-1"
            )
            # not yet supported - action.resumeIntervalMax=`echo $OPS_RETRY_WAIT`
    }
}
