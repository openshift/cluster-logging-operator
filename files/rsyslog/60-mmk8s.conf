# for crio, the end of message is when the value "F" is in the logtag field
# for docker json-file, it is when the "log" field value ends with "\n"
# however, since imfile processing happens _before_ the field parsing, we have to
# rely on two regular expressions - basically look for the pattern \n"}$ for the
# string at the end of the message, or \n"," for the string in the middle of
# a message
input(type="imfile"
      file="/var/log/containers/*.log"
      tag="kubernetes" addmetadata="on" reopenOnTruncate="on"
      discardTruncatedMsg="on" msgDiscardingError="off"
      endmsg.regex="(^[^ ]+ (stdout|stderr) F )|(\\n\"}$)|(\\n\",\")") # "

if ((strlen($!CONTAINER_NAME) > 0) and (strlen($!CONTAINER_ID_FULL) > 0)) or
    ((strlen($!metadata) > 0) and (strlen($!metadata!filename) > 0) and ($!metadata!filename startswith "/var/log/containers/")) then {
    if ((strlen($!metadata) > 0) and (strlen($!metadata!filename) > 0) and ($!metadata!filename startswith "/var/log/containers/")) then {
        if $msg startswith "{" then {
            action(type="mmnormalize" rulebase="/etc/rsyslog.d/multiline-json.rulebase")
            foreach ($.ii in $!multilinejson) do {
                if strlen($!@timestamp) == 0 then {
                    set $!@timestamp = $.ii!time;
                }
                if strlen($!stream) == 0 then {
                    set $!stream = $.ii!stream;
                }
                if strlen($!log) == 0 then {
                    set $!log = $.ii!log;
                } else {
                    reset $!log = $!log & $.ii!log;
                }
            }
            unset $!multilinejson;
        } else {
            action(type="mmnormalize" rulebase="/etc/rsyslog.d/crio.rulebase")
            foreach ($.ii in $!multilinecrio) do {
                if strlen($!@timestamp) == 0 then {
                    set $!@timestamp = $.ii!time;
                }
                if strlen($!stream) == 0 then {
                    set $!stream = $.ii!stream;
                }
                if strlen($!log) == 0 then {
                    set $!log = $.ii!log;
                } else {
                    reset $!log = $!log & $.ii!log;
                }
            }
            unset $!multilinecrio;
        }
    }
    action(type="mmkubernetes"
       filenamerulebase="/etc/rsyslog.d/k8s_filename.rulebase"
       containerrulebase="/etc/rsyslog.d/k8s_container_name.rulebase"
       tls.cacert="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
       tokenfile="/var/run/secrets/kubernetes.io/serviceaccount/token"
       cacheexpireinterval=`echo $RSYSLOG_K8S_CACHE_EXPIRE_INTERVAL`
       cacheentryttl=`echo $RSYSLOG_K8S_CACHE_ENTRY_TTL`
       action.resumeRetryCount="-1"
       )
       # not yet supported - action.resumeIntervalMax="300"
}
