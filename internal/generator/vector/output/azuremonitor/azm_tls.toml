[transforms.output_azure_monitor_logs_dedot]
type = "remap"
inputs = ["pipelineName"]
source = '''
  .openshift.sequence = to_unix_timestamp(now(), unit: "nanoseconds")
  if exists(.kubernetes.namespace_labels) {
	  for_each(object!(.kubernetes.namespace_labels)) -> |key,value| {
		newkey = replace(key, r'[\./]', "_")
		.kubernetes.namespace_labels = set!(.kubernetes.namespace_labels,[newkey],value)
		if newkey != key {
		  .kubernetes.namespace_labels = remove!(.kubernetes.namespace_labels,[key],true)
		}
	  }
  }
  if exists(.kubernetes.labels) {
	  for_each(object!(.kubernetes.labels)) -> |key,value| {
		newkey = replace(key, r'[\./]', "_")
		.kubernetes.labels = set!(.kubernetes.labels,[newkey],value)
		if newkey != key {
		  .kubernetes.labels = remove!(.kubernetes.labels,[key],true)
		}
	  }
  }
'''

[sinks.output_azure_monitor_logs]
type = "azure_monitor_logs"
inputs = ["output_azure_monitor_logs_dedot"]
customer_id = "6vzw6sHc-0bba-6sHc-4b6c-8bz7sr5eggRt"
log_type = "myLogType"
shared_key = "z9ndQSFH1RLDnS6WR35m84u326p3"

[sinks.output_azure_monitor_logs.tls]
verify_certificate = false
verify_hostname = false
key_file = "/var/run/ocp-collector/secrets/azure-monitor-secret-tls/tls.key"
crt_file = "/var/run/ocp-collector/secrets/azure-monitor-secret-tls/tls.crt"
ca_file = "/var/run/ocp-collector/secrets/azure-monitor-secret-tls/ca-bundle.crt"
key_pass = "foo"