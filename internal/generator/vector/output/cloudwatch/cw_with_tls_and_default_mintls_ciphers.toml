# Cloudwatch Stream Names
[transforms.cw_normalize_streams]
type = "remap"
inputs = ["cw-forward"]
source = '''
  .stream_name = "default"

  if ( ._internal.file != null) {
   .stream_name = "kubernetes" + replace!(._internal.file, "/", ".")
  }

  if ( .log_type == "audit" ) {
   .stream_name = ( "${VECTOR_SELF_NODE_NAME}" + .tag ) ?? .stream_name
  }
  if ( .log_type == "infrastructure" ) {
   .stream_name = ( .hostname + "." + .stream_name ) ?? .stream_name
  }

  if ( .tag == ".journal.system" ) {
   .stream_name =  ( .hostname + .tag ) ?? .stream_name
  }
  del(.tag)
  del(.source_type)
'''

# Cloudwatch Groupname
[transforms.cw_group_name]
type = "remap"
inputs = ["cw_normalize_streams"]
source = '''
._internal.cw_groupname = to_string!(.log_type||"missing")
'''

[transforms.cw_dedot]
type = "remap"
inputs = ["cw_group_name"]
source = '''
  .openshift.sequence = to_unix_timestamp(now(), unit: "nanoseconds")
  if exists(.kubernetes.namespace_labels) {
	  for_each(object!(.kubernetes.namespace_labels)) -> |key,value| {
		newkey = replace(key, r'[\./]', "_")
		.kubernetes.namespace_labels = set!(.kubernetes.namespace_labels,[newkey],value)
		if newkey != key {
		  .kubernetes.namespace_labels = remove!(.kubernetes.namespace_labels,[key],true)
		}
	  }
  }
  if exists(.kubernetes.labels) {
	  for_each(object!(.kubernetes.labels)) -> |key,value| {
		newkey = replace(key, r'[\./]', "_")
		.kubernetes.labels = set!(.kubernetes.labels,[newkey],value)
		if newkey != key {
		  .kubernetes.labels = remove!(.kubernetes.labels,[key],true)
		}
	  }
  }
'''
# Cloudwatch Logs
[sinks.cw]
type = "aws_cloudwatch_logs"
inputs = ["cw_dedot"]
region = "us-east-test"
compression = "none"
group_name = "{{ _internal.cw_groupname }}"
stream_name = "{{ stream_name }}"
auth.access_key_id = "SECRET[kubernetes_secret.vector-cw-secret/aws_access_key_id]"
auth.secret_access_key = "SECRET[kubernetes_secret.vector-cw-secret/aws_secret_access_key]"
healthcheck.enabled = false

[sinks.cw.encoding]
codec = "json"
except_fields = ["_internal"]

[sinks.cw.tls]
min_tls_version = "VersionTLS12"
ciphersuites = "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,DHE-RSA-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384"
