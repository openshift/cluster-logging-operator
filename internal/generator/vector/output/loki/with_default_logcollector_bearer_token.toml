[transforms.default_loki_apps_remap]
type = "remap"
inputs = ["application"]
source = '''
 del(.tag)
'''

[transforms.default_loki_apps_dedot]
type = "remap"
inputs = ["default_loki_apps_remap"]
source = '''
 .openshift.sequence = to_unix_timestamp(now(), unit: "nanoseconds")
 if exists(.kubernetes.namespace_labels) {
	  for_each(object!(.kubernetes.namespace_labels)) -> |key,value| {
		newkey = replace(key, r'[\./]', "_")
		.kubernetes.namespace_labels = set!(.kubernetes.namespace_labels,[newkey],value)
		if newkey != key {
		  .kubernetes.namespace_labels = remove!(.kubernetes.namespace_labels,[key],true)
		}
	  }
 }
 if exists(.kubernetes.labels) {
	  for_each(object!(.kubernetes.labels)) -> |key,value| {
		newkey = replace(key, r'[\./]', "_")
		.kubernetes.labels = set!(.kubernetes.labels,[newkey],value)
		if newkey != key {
		  .kubernetes.labels = remove!(.kubernetes.labels,[key],true)
		}
	  }
 }
'''

[transforms.default_loki_apps_remap_label]
type = "remap"
inputs = ["default_loki_apps_dedot"]
source = '''
if !exists(.kubernetes.namespace_name) {
  .kubernetes.namespace_name = ""
}
if !exists(.kubernetes.pod_name) {
  .kubernetes.pod_name = ""
}
if !exists(.kubernetes.container_name) {
  .kubernetes.container_name = ""
}
'''

[sinks.default_loki_apps]
type = "loki"
inputs = ["default_loki_apps_remap_label"]
endpoint = "http://lokistack-dev-gateway-http.openshift-logging.svc:8080/api/logs/v1/application"
out_of_order_action = "accept"
healthcheck.enabled = false

[sinks.default_loki_apps.encoding]
codec = "json"

[sinks.default_loki_apps.labels]
kubernetes_container_name = "{{kubernetes.container_name}}"
kubernetes_host = "${VECTOR_SELF_NODE_NAME}"
kubernetes_namespace_name = "{{kubernetes.namespace_name}}"
kubernetes_pod_name = "{{kubernetes.pod_name}}"
log_type = "{{log_type}}"


[sinks.default_loki_apps.tls]
ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"

# Bearer Auth Config
[sinks.default_loki_apps.auth]
strategy = "bearer"
token = "token-for-internal-loki"
