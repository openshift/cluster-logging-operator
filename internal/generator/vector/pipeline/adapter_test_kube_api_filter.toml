[transforms.pipeline_mypipeline_viaq_0]
type = "remap"
inputs = ["input_audit_in_kube_meta"]
source = '''
if .log_type == "audit" && .log_source == "kubeAPI" {
  .openshift.cluster_id = "${OPENSHIFT_CLUSTER_ID:-}"
  ._internal.message = .message
  del(.file)
  del(.source_type)
  . = merge(., parse_json!(string!(.message))) ?? .
  del(.message)
  .k8s_audit_level = .level
  .hostname = get_env_var("VECTOR_SELF_NODE_NAME") ?? ""
  ts = del(.timestamp); if !exists(."@timestamp") {."@timestamp" = ts}
  .openshift.sequence = to_unix_timestamp(now(), unit: "nanoseconds")
}
'''

[transforms.pipeline_mypipeline_my_audit_1]
type = "remap"
inputs = ["pipeline_mypipeline_viaq_0"]
source = '''
	if is_string(.auditID) && is_string(.verb) {
		res = if is_null(.objectRef.resource) { "" } else { string!(.objectRef.resource) }
		sub = if is_null(.objectRef.subresource) { "" } else { string!(.objectRef.subresource) }
		namespace = if is_null(.objectRef.namespace) { "" } else { string!(.objectRef.namespace) }
		username = if is_null(.user.username) { "" } else { string!(.user.username) }
		if sub != "" { res = res + "/" + sub }
		if includes([404,409,422,429], .responseStatus.code) { # Omit by response code.
			.level = "None"
		} else if (username != "" && match(username, r'^(.*apiserver)$') && true) {
			.level = "RequestResponse"
		} else if (includes(["get"], .verb) && true) {
			.level = "None"
		} else if (true) {
			.level = "Metadata"
		} else {
			# No rule matched, apply default rules for system events.
			if match(username, r'^$|^system:.*') { # System events
				readonly = r'get|list|watch|head|options'
				if match(string!(.verb), readonly) {
		.level = "None" # Drop read-only system events.
				} else if ((int(.responseStatus.code) < 300 ?? true) && starts_with(username, "system:serviceaccount:"+namespace)) {
		.level = "None" # Drop write events by service account for same namespace as resource or for non-namespaced resource.
				}
				if .level == "RequestResponse" {
		.level = "Request" # Downgrade RequestResponse system events.
				}
			}
		}
		# Update the event
		if .level == "None" {
			abort
		} else {
			if .level == "Metadata" {
				del(.responseObject)
				del(.requestObject)
			} else if .level == "Request" {
				del(.responseObject)
			}
		}
	}
'''


[transforms.pipeline_mypipeline_viaqdedot_2]
type = "remap"
inputs = ["pipeline_mypipeline_my_audit_1"]
source = '''
  if .log_source == "Container" {
    if exists(.kubernetes.namespace_labels) {
      ._internal.kubernetes.namespace_labels = .kubernetes.namespace_labels
      for_each(object!(.kubernetes.namespace_labels)) -> |key,value| {
        newkey = replace(key, r'[\./]', "_")
        .kubernetes.namespace_labels = set!(.kubernetes.namespace_labels,[newkey],value)
        if newkey != key {.kubernetes.namespace_labels = remove!(.kubernetes.namespace_labels,[key],true)}
      }
    }
    if exists(.kubernetes.labels) {
      ._internal.kubernetes.labels = .kubernetes.labels
      for_each(object!(.kubernetes.labels)) -> |key,value| {
        newkey = replace(key, r'[\./]', "_")
        .kubernetes.labels = set!(.kubernetes.labels,[newkey],value)
        if newkey != key {.kubernetes.labels = remove!(.kubernetes.labels,[key],true)}
      }
    }
  }
  if exists(.openshift.labels) {for_each(object!(.openshift.labels)) -> |key,value| {
    newkey = replace(key, r'[\./]', "_")
    .openshift.labels = set!(.openshift.labels,[newkey],value)
    if newkey != key {.openshift.labels = remove!(.openshift.labels,[key],true)}
  }}
'''