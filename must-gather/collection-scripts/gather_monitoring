#!/bin/bash

# based on gather_monitoring script from standard must-gather

# safeguards
set -o nounset
set -o errexit
set -o pipefail

# global readonly constants
# expect base collection path as an argument
declare -r BASE_COLLECTION_PATH=$1
declare -r MONITORING_PATH="${BASE_COLLECTION_PATH}/monitoring"

source "$(dirname "$0")"/monitoring_common.sh

# init initializes global variables that need to be computed.
# E.g. get token of the default ServiceAccount
init() {
  mkdir -p "${MONITORING_PATH}"

  readarray -t PROM_PODS < <(
    oc get pods -n openshift-monitoring  -l prometheus=k8s \
      --no-headers -o custom-columns=":metadata.name"
  )
}

# prom_get makes http GET requests to prometheus /api/v1/$object and stores
# the stdout and stderr results
prom_get() {
  local object="$1"; shift
  local path="${1:-$object}"; shift || true
  local pod
  pod=$(get_first_ready_prom_pod)

  local result_path="$MONITORING_PATH/prometheus/$path"
  mkdir -p "$(dirname "$result_path")"

  echo "INFO: Getting ${object} from ${pod}"
  oc exec "${pod}" \
    -c prometheus \
    -n openshift-monitoring \
    -- /bin/bash -c "curl -sG http://localhost:9090/api/v1/${object}" \
      >  "${result_path}.json" \
      2> "${result_path}.stderr"
}

monitoring_gather(){
  init

  echo "INFO: Found ${#PROM_PODS[@]} replicas - ${PROM_PODS[*]}"

  # begin gathering
  # NOTE || true ignores failures

  prom_get rules    || true

  # force disk flush to ensure that all data gathered are written
  sync
}

monitoring_gather
