// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/openshift/cluster-logging-operator/pkg/apis/logging/v1.ClusterLogging":       schema_pkg_apis_logging_v1_ClusterLogging(ref),
		"github.com/openshift/cluster-logging-operator/pkg/apis/logging/v1.ClusterLoggingSpec":   schema_pkg_apis_logging_v1_ClusterLoggingSpec(ref),
		"github.com/openshift/cluster-logging-operator/pkg/apis/logging/v1.ClusterLoggingStatus": schema_pkg_apis_logging_v1_ClusterLoggingStatus(ref),
	}
}

func schema_pkg_apis_logging_v1_ClusterLogging(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterLogging is the Schema for the clusterloggings API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift/cluster-logging-operator/pkg/apis/logging/v1.ClusterLoggingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift/cluster-logging-operator/pkg/apis/logging/v1.ClusterLoggingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/openshift/cluster-logging-operator/pkg/apis/logging/v1.ClusterLoggingSpec", "github.com/openshift/cluster-logging-operator/pkg/apis/logging/v1.ClusterLoggingStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_logging_v1_ClusterLoggingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterLoggingSpec defines the desired state of ClusterLogging",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_logging_v1_ClusterLoggingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterLoggingStatus defines the observed state of ClusterLogging",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}
